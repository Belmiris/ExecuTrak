//*******************************************************************
//
// Installation script for the Electronic Commerce Module release
//
// 1.11 - November 11, 1998 David
//
//*******************************************************************
//
// includes

#include "winapi.h"

// constants
#define PRODUCT_VERSION         "3.00"  //CHANGE THE VESION BEFORE BUILDING DISK

#define PROGRAM_SIZE            5

#define PRODUCT_NAME            "ExecuTrak Electronic Commerce Module"
#define MODULE_NAME             "Electronic Commerce"

#define PRODUCT_NAME_TLC        "EDI Trading Partner"
#define MODULE_NAME_TLC         "EDI Trading Partner"
#define PRODUCT_VERSION_TLC     "3.00"
#define HELP_FILE               ""


#define COMPANY_NAME            "FACTOR"
#define APP_BASE_PATH           "Factor\\ExecTrak"
#define PRODUCT_KEY             "FACTMENU.EXE"

#define KEY_DEFAULT             ""
#define KEY_EC_INVOICE          "Electronic Commerce"
#define KEY_TLC                 "dediexc.exe"

#define WELCOME_TITLE           "Electronic Commerce Installation"


declare

// include files
#include "sddialog.h"

        //log setup variables and write log function prototype
	NUMBER nvFileOut;
	STRING INSTALL_OPTION,INSTALL_LINE;
	STRING INSWARN,LOGMSG,RESULTLOG;

	prototype LOGWRITE(STRING);

        // global variables
        NUMBER nReturn, nTemp, nStatus, nPosi;

        STRING KEY_ROOT, KEY_PRODUCT, KEY_VERSION
        STRING KEY_PRODUCT_TLC, KEY_VERSION_TLC, szServerDisk, szLocalDisk;
        STRING szBaseDirectory, szINIDirectory, szSRCDIR;
        STRING szDestMsg, szId, szComponents, szProgram;
        STRING szMsg, szNumber, szTemp, szFolder, szTLCDir;
        STRING szSCIcon, szSCExe, szSCWork, szAppDir;
        STRING szDBFrom, szDBTo, szForceInstall, szFind;
        STRING szOldValue, szNewValue, szSub;
                
        BOOL bZFailure, bTemp1, bTemp2;

        LIST    listInfo;
                                    
        // function prototypes
        prototype CheckDiskSpace(NUMBER);
        prototype ConfirmCancelTLC();
        prototype GetTLCPath();
        prototype CheckTLCKey();
        prototype UpdateFactorIni();
        prototype WriteEDIprofile();


// the script starts here
program


StartHere:

        //set installation header
        if (SetFont(FONT_TITLE, 0, "Arail") < 0) then
                SetTitle( "Installing " + PRODUCT_NAME + "\nVersion " + PRODUCT_VERSION, 16, WHITE );
        else
                SetTitle( "Installing " + "ExecuTrak" + "™ " + MODULE_NAME + " Module \nVersion " + PRODUCT_VERSION, 16, WHITE );
        endif; 

// ************************* Check for user defined command line
	INSTALL_OPTION=PRODUCT_NAME + " " + PRODUCT_VERSION;        
	INSTALL_LINE=CMDLINE;

        if( CreateFile( nvFileOut, WINSYSDIR, "APESETUP.TXT" ) < 0 ) then

    		MessageBeep( 0 );
                MessageBox( "APESETUP.TXT could not be opened", SEVERE );
            abort;
	else
		LOGMSG=INSTALL_OPTION + " SETUP PARAM= " + INSTALL_LINE;
		LOGWRITE(LOGMSG);
			
	endif;   

        if (CMDLINE = "-A" || CMDLINE = "-a") then
        	INSTALL_OPTION=INSTALL_OPTION + "\n      FORCED INSTALLATION";
		MessageBox("WARNING!  You are about to perform a " + "FORCED INSTALLATION of\n\n" + PRODUCT_NAME + " " + PRODUCT_VERSION
                        + "\n\nThis will OVERWRITE ALL FILES associated with this program,\nand may effect the operation of other programs that use the same files.\n\nPress 'Cancel' on the next screen and \n'Exit Setup' if you do not wish to do this.", WARNING);
                szForceInstall = "1 ";
        else
                szForceInstall = "0 ";
	endif;
// ************************* 

        // set registry keys
        KEY_ROOT = "SOFTWARE\\" + COMPANY_NAME;
        KEY_PRODUCT = KEY_ROOT + "\\" + PRODUCT_NAME;
        KEY_VERSION = KEY_PRODUCT + "\\" + PRODUCT_VERSION;
        KEY_PRODUCT_TLC = KEY_ROOT + "\\" + PRODUCT_NAME_TLC;
        KEY_VERSION_TLC = KEY_PRODUCT_TLC + "\\" + PRODUCT_VERSION_TLC;
        
        RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

        // set title for all dialog boxes
        SetDialogTitle(DLG_ASK_OPTIONS, WELCOME_TITLE);
        SetDialogTitle(DLG_ASK_TEXT, WELCOME_TITLE);
        SetDialogTitle(DLG_ASK_YESNO, WELCOME_TITLE);
        SetDialogTitle(DLG_MSG_INFORMATION, WELCOME_TITLE);
        SetDialogTitle(DLG_MSG_SEVERE, WELCOME_TITLE);
        SetDialogTitle(DLG_MSG_WARNING, WELCOME_TITLE);
        SetDialogTitle(DLG_USER_CAPTION, WELCOME_TITLE);


        //**************************************************
        //
        //            MAIN INSTALLATION
        //
        //**************************************************

MainInstallation:
        // set installation information
        InstallationInfo(COMPANY_NAME, PRODUCT_NAME, PRODUCT_VERSION, PRODUCT_KEY);

	Enable(DIALOGCACHE);

        
SayWelcome:
        // welcome message and get desired target path
        Disable(BACKBUTTON);
        szMsg = "Welcome to the " + MODULE_NAME + " Module Setup program.  This " +
            "program will install " + MODULE_NAME + " Module on your computer.";

        SdWelcome(WELCOME_TITLE, szMsg);


FindPreviousInstallation:
        nReturn = 0;
        nTemp = -1;

        // check the registry - if old installation exists.
        if (RegDBGetKeyValueEx(KEY_VERSION, KEY_EC_INVOICE, nReturn, szTemp, nTemp) = 0) then
                if (szTemp = "") then
                        szBaseDirectory = "J:" ^ APP_BASE_PATH;
                else
                        szBaseDirectory = szTemp;
                        ParsePath(szTemp, szBaseDirectory, DISK);
                        szBaseDirectory = szTemp ^ APP_BASE_PATH;
                endif;
        else
                szBaseDirectory = "J:" ^ APP_BASE_PATH;
        endif;

        NumToStr(szNumber, PROGRAM_SIZE * 1024);

        szSRCDIR = SRCDIR;

GetTargetPath:
        szDestMsg = "Setup will install " + MODULE_NAME + " Module in the Destination Directory.\n\n";
        szDestMsg = szDestMsg + "To install to this directory, click Next.\n\n";
        szDestMsg = szDestMsg + "To install to a different directory, click Browse and select another\n";
        szDestMsg = szDestMsg + "directory.\n\n";
        szDestMsg = szDestMsg + "You can choose not to install " + MODULE_NAME + " Module by clicking Cancel to\n";
        szDestMsg = szDestMsg + "exit Setup.\n\n";
        szDestMsg = szDestMsg + MODULE_NAME + " Module requires " + szNumber + " Kbytes of free disk space.\n";
    
        Enable(BACKBUTTON);

        if (AskDestPath("Choose " + MODULE_NAME + " Module Programs Location", szDestMsg, szBaseDirectory, 0) = BACK) then
            goto SayWelcome;
        endif;

        //check valid directory
        if (ExistsDir(szBaseDirectory) = NOTEXISTS) then
                goto GetTargetPath;
        endif;

        // make sure destination directory is \factor\exectrak
        szTemp = szBaseDirectory ^ "";
        StrToLower(szTemp, szTemp);

        ParsePath(szFolder, szBaseDirectory, DISK);
        StrToLower(szFolder, szFolder);

        nTemp = StrFind(szTemp, szFolder ^ "factor\\exectrak");

        StrToUpper(szFolder, szFolder);

        if (nTemp < 0) then   //incorrect directory
                szMsg = MODULE_NAME + " Module Program Directory '" +
                    szBaseDirectory + "\\' is not valid.\n\n";
                szMsg = szMsg + MODULE_NAME + " Module will be installed to '" +
                    szFolder ^ APP_BASE_PATH + "' directory.";

                MessageBox(szMsg, MB_ICONEXCLAMATION + MB_TASKMODAL);
        endif;

        szBaseDirectory = szFolder ^ APP_BASE_PATH;

        // check available disk space
        if (CheckDiskSpace(PROGRAM_SIZE * 1024 * 1024) = FALSE) then
                goto GetTargetPath;
        endif;


GetTLCInfo:
        if (AskYesNo("Have you installed the TrustedLink Commerce software?",
            YES) = NO) then
                MessageBox("Please install TrustedLink Commerce software before " +
                        "installing the " + PRODUCT_NAME + ".", INFORMATION);
                abort;
        endif;

        // check the registry - if old trading partner setup exists.
        if (RegDBGetKeyValueEx(KEY_VERSION_TLC, MODULE_NAME_TLC, nReturn, szTemp, nTemp) = 0) then
                szTLCDir = szTemp;
        else
                szTLCDir = "C:\\HARB\\TLC";
        endif;

lblGetTLCPath1:
        if (GetTLCPath() = BACK) then
                goto GetTLCInfo;
        else
                if (CheckTLCKey() = NOTEXISTS) then
                        goto lblGetTLCPath1;
                endif;
        endif;

        StrToUpper(szTLCDir, szTLCDir);

ConfirmCopy:
        // Show SdStartCopy dialog to confirm file transfer operation.
        listInfo = ListCreate( STRINGLIST );

        //Construct the Info List
        ListAddString(listInfo, PRODUCT_NAME + " program directory:", AFTER);
        ListAddString(listInfo, "        " + szBaseDirectory, AFTER);
        ListAddString(listInfo, "", AFTER);
        ListAddString(listInfo, "TrustedLink Commerce program direcotry:", AFTER);
        ListAddString(listInfo, "        " + szTLCDir, AFTER);
        ListAddString(listInfo, "", AFTER);
        ListAddString(listInfo, PRODUCT_NAME + " Program Folder:", AFTER);
        ListAddString(listInfo, "        Program\\Factor" + "\\" + PRODUCT_NAME, AFTER);

        szMsg = "Setup has enough information to start copying " + PRODUCT_NAME + " files.  " +
                "If you want to review or change any settings, click Back.  If you are " +
                "satisfied with the settings, click Next to begin copying files.";
        if ( SdStartCopy( "Confirm Current Settings", szMsg, listInfo ) = BACK ) then
           ListDestroy( listInfo );
           goto GetTLCInfo;
        endif;

        ListDestroy( listInfo );

        // Set the App Paths key for the main program.
        szAppDir = szBaseDirectory ^ "BIN";
        RegDBSetItem( REGDB_APPPATH, szAppDir );
        szProgram = szAppDir + "\\apeeint.exe";
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szProgram );
        

StartCopy:
        ParsePath(szServerDisk, szBaseDirectory, DISK);
        ParsePath(szLocalDisk, WINDIR, DISK);

        LOGMSG="START CREATING EFT WORKING DIRECTORY IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

        szMsg = "Setup is creating EDI/EFT working directories. Please wait...";
        Enable(HOURGLASS);
        SdShowMsg (szMsg, TRUE);

        szTemp = szBaseDirectory ^ "DTN";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                        goto ZFAILURE;
                endif;
        endif;

        szTemp = szBaseDirectory ^ "DTN" ^ "BAK";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                        goto ZFAILURE;
                endif;
        endif;

        szTemp = szBaseDirectory ^ "DTNCTRL";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                        goto ZFAILURE;
                endif;
        endif;

        szTemp = szBaseDirectory ^ "DTNLOG";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                        goto ZFAILURE;
                endif;
        endif;

        szTemp = szBaseDirectory ^ "EFT";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                        goto ZFAILURE;
                endif;
        endif;

        szTemp = szBaseDirectory ^ "EFT" ^ "BAK";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                        goto ZFAILURE;
                endif;
        endif;

        LOGMSG="END CREATING EFT WORKING DIRECTORY IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

        LOGMSG="START CREATING EDI WORKING DIRECTORY IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

        szTemp = szBaseDirectory ^ "EDI";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                endif;
        endif;

        LOGMSG="END CREATING EDI WORKING DIRECTORY IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

        szTemp = szLocalDisk ^ APP_BASE_PATH ^ "EDI" ^ "Hold";

        LOGMSG="START CREATING EDI WORKING DIRECTORY IN : " + szLocalDisk ^ APP_BASE_PATH ^ "EDI";
	LOGWRITE(LOGMSG);

        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                endif;
        endif;

        szTemp = szLocalDisk ^ APP_BASE_PATH ^ "EDI" ^ "Transmit";
        if (ExistsDir(szTemp) = NOTEXISTS) then
                if (CreateDir(szTemp) < 0) then
                        MessageBox("Cannot create directory: " + szTemp, SEVERE);
                endif;
        endif;

        LOGMSG="END CREATING EDI WORKING DIRECTORY IN : " + szLocalDisk ^ APP_BASE_PATH ^ "EDI";
	LOGWRITE(LOGMSG);

        Disable(HOURGLASS);
        SdShowMsg(szMsg, FALSE);

	LOGMSG="INSTALLING IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

        Enable(STATUS);

        FileSetBeginDefine("All Files");  // begin of define fileset +++++++++++++++++

        // These go into the ExecuTrak and/or Bin directory
        TARGETDIR = szBaseDirectory;

// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES

        if (CMDLINE = "-A" || CMDLINE = "-a") then

                LOGMSG="START FORCED COPY OF appfiles FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("factbin.z", "*.*", COMP_NORMAL | INCLUDE_SUBDIR) < 0) then
                        MessageBox("FACTBIN.Z could not be decompressed", SEVERE);
                        goto ZFAILURE;
                endif;

                LOGMSG="END FORCED COPY OF factbin FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

        else

// ************************* Normal install

                LOGMSG="START NORMAL COPY OF appfiles FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("factbin.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | COMP_UPDATE_SAME | INCLUDE_SUBDIR) < 0) then
                        MessageBox("FACTBIN.Z could not be decompressed", SEVERE);
                        goto ZFAILURE;
                endif;

                LOGMSG="END NORMAL COPY OF factbin FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);
        endif;

        
        //extract the local database into WINDOWS\TEMP directory
        TARGETDIR = WINDIR ^ "TEMP";

        LOGMSG="START FORCED COPY OF FACTOR.MDB and FACTOR.LDB IN " + TARGETDIR;
        LOGWRITE(LOGMSG);

        if (CompressGet("localdb.z", "*.*", COMP_NORMAL) < 0) then
                MessageBox("LOCALDB.Z could not be decompressed", SEVERE);
                goto ZFAILURE;
        endif;

        LOGMSG="END FORCED COPY OF FACTOR.MDB and FACTOR.LDB IN " + TARGETDIR;
        LOGWRITE(LOGMSG);                       

        FileSetEndDefine("All Files");  // end of define fileset +++++++++++++++++

        SetStatusWindow(0, "Copying " + PRODUCT_NAME + " installation files...");
        StatusUpdate(ON, 94);

        nReturn = FileSetPerformEz("All Files", 0);

        if (nReturn != FS_DONE) then
                LOGMSG="ERRORFILENAME=" + ERRORFILENAME;
                LOGWRITE(LOGMSG);
        endif;

        switch (nReturn)
                case FS_CREATEDIR:
                        MessageBox("Failed to Create target directory", SEVERE);
                        goto ZFAILURE;
                case FS_PACKAGING:
                        MessageBox("Unable to find file in package list", SEVERE);
                        goto ZFAILURE;
                case FS_FILENOTINLIB:
                        MessageBox("Unable to find target file in compressed lib", INFORMATION);
                        goto ZFAILURE;
                case FS_OPERROR:
                        MessageBox("An error occurred during the process of copying or decompressing files", INFORMATION);
                        goto ZFAILURE;
                case FS_DONE:
                        // do nothing
                default:
                        MessageBox("General file copy failure", SEVERE);
                        goto ZFAILURE;
        endswitch;

        SRCDIR = TARGETDIR;

        //copy factor.mdb and factor.ldb to WINDOWS\SYSTEM directory
        szDBFrom = "\"" + SRCDIR + "\"";
        TARGETDIR = WINSYSDIR;
        szDBTo = "\"" + TARGETDIR + "\"";

        LOGMSG="LAUNCHING CPYLOCAL.EXE TO COPY FACTOR.MDB and FACTOR.LDB IN " + TARGETDIR;
        LOGWRITE(LOGMSG);

        LaunchAppAndWait(szBaseDirectory ^ "BIN" ^ "cpylocal.exe", szForceInstall +
                szDBFrom + " " + szDBTo, WAIT);

        SetStatusWindow(95, "Copying Local Database...");

        // delete the local database from WINDOWS\TEMP directory
        TARGETDIR = SRCDIR;
        LOGMSG="START DELETE FILE: FACTOR.MDB and FACTOR.LDB IN " + TARGETDIR;
        LOGWRITE(LOGMSG);
        DeleteFile("FACTOR.MDB");
        DeleteFile("FACTOR.LDB");
        LOGMSG="END DELETE FILE: FACTOR.MDB and FACTOR.LDB IN " + TARGETDIR;
        LOGWRITE(LOGMSG);

        StatusUpdate(OFF, 0);


CreateProgramFolder:
        // create folder shortcuts
	LOGMSG="CREATING FOLDER SHORTCUTS";
	LOGWRITE(LOGMSG);

        szFolder = COMPANY_NAME ^ PRODUCT_NAME;
        szAppDir = szBaseDirectory ^ "BIN";
        szSCWork = szAppDir;
        szSCIcon = "";

        SetStatusWindow(96, "Creating program folder and icons...");

        CreateProgramFolder(szFolder ^ "ExecuTrak EFT Scheduler");
        szSCExe = szAppDir ^ "syschdlr.exe";
        LongPathToQuote(szSCExe, TRUE);
        AddFolderIcon(szFolder ^ "ExecuTrak EFT Scheduler", "EFT Scheduler",
				  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        SetStatusWindow(97, "Creating program folder and icons...");

        if (HELP_FILE != "") then
                szSCWork = szAppDir;
                szSCExe = szAppDir ^ HELP_FILE;
                LongPathToQuote(szSCExe, TRUE);
                AddFolderIcon(szFolder, MODULE_NAME + " Module Help",
                      szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);
        endif;

        LOGMSG="FOLDER SHORTCUTS CREATED";
        LOGWRITE(LOGMSG);

        szMsg = "Setup is updating Program INI file. Please wait...";
        Enable(HOURGLASS);
        SdShowMsg (szMsg, TRUE);

        UpdateFactorIni();
        WriteEDIprofile();

        Disable(HOURGLASS);
        SdShowMsg ("", FALSE);


RegisterOLE:
        //move TCLCOM32.EXE OLE server to \Factor\OLE
        //SRCDIR = szBaseDirectory ^ "Bin";
        //TARGETDIR = szBaseDirectory ^ "Ole";

        //LOGMSG="MOVE TCLCOM32.EXE FROM " + SRCDIR + " TO " + TARGETDIR;
        //LOGWRITE(LOGMSG);

        //nReturn = XCopyFile("tclcom32.exe", "tclcom32.exe", COMP_UPDATE_SAME);

        //TARGETDIR = SRCDIR;
        //DeleteFile("tclcom32.exe");

        //TARGETDIR = szBaseDirectory ^ "OLE";

        //register OLE server
        //LOGMSG="START REGISTER OF OLE SERVER IN " + TARGETDIR;
        //LOGWRITE(LOGMSG);

        //LaunchAppAndWait(TARGETDIR ^ "tclcom32.exe", "", WAIT);

        //LOGMSG="END REGISTER OF OLE SERVER IN " + szAppDir;
        //LOGWRITE(LOGMSG);

        SetStatusWindow(98, "Finishing " + PRODUCT_NAME + " intallation...");

        TARGETDIR = szBaseDirectory ^ "Bin";


        // add registry information
	LOGMSG="ADDING REGISTRY INFORMATION";
	LOGWRITE(LOGMSG);

        RegDBSetKeyValueEx(KEY_VERSION, KEY_EC_INVOICE, REGDB_STRING, szBaseDirectory, -1);


UpdateTLCDefault:
        // update the default trading partner document files
        if (szTLCDir != "") then
                LOGMSG="START OF UPDATE TLC DEFAULT";
                LOGWRITE(LOGMSG);

                szFolder = szTLCDir ^ "DEDI.INI";
                GetProfString(szFolder, "Directories", "Archive", szTemp);

                szAppDir = szTemp;
                StrToUpper(szTemp, szTemp);

                // set archive directory
                if (szTemp != szTLCDir ^ "ARCHIVE" ^ "") then
                        ReplaceProfString(szFolder, "Directories",
                        "Archive", szAppDir, szTLCDir ^ "ARCHIVE" ^ "");
                endif;

                LOGMSG="END OF UPDATE TLC DEFAULT";
                LOGWRITE(LOGMSG);

                StatusUpdate(OFF, 0);
        endif;

        szFind = szTLCDir ^ "DEDISCH.EXE";

        if (GetProfString("WIN.INI", "windows", "run", szOldValue) = 0) then
                LOGMSG="START UPDATING WIN.INI [windows] run=";
                LOGWRITE(LOGMSG);

                szNewValue = "";

                //remove C:\HARB\TLC\DEDISCH.EXE From run keyword
                StrToUpper(szTemp, szOldValue);

                nPosi = StrFind(szTemp, szFind);

                if (nPosi >= 0) then
                        if (StrLength(szOldValue) != StrLength(szFind)) then
                                if (nPosi > 0) then
                                        StrSub(szSub, szTemp, 0, nPosi);
                                        szNewValue = szSub;
                                endif;
        
                                StrSub(szTemp, szTemp, nPosi + 23, StrLength(szTemp) - nPosi - 23);
                                StrSub(szSub, szTemp, 0, 1);
        
                                if (szSub = ";") then
                                        StrSub(szTemp, szTemp, 1, StrLength(szTemp) - 1);
                                endif;
        
                                szNewValue = szNewValue + szTemp;
                        endif;

                        ReplaceProfString("WIN.INI", "windows", "run", szOldValue, szNewValue);
                endif;

                LOGMSG="END UPDATING WIN.INI [windows] run=";
                LOGWRITE(LOGMSG);
        endif;

        SetStatusWindow(99, "Finishing " + PRODUCT_NAME + " intallation...");

        goto Finished;


ZFAILURE:
        LOGMSG="INSTALLATION FAILED";
        LOGWRITE(LOGMSG);

        MessageBox("Installation incomplete.  Close any running\n" +
           "applications before intalling " + PRODUCT_NAME + ".",
           INFORMATION);

        abort;
        

Finished:
        SetStatusWindow(100, "Finishing " + PRODUCT_NAME + " intallation...");

        Delay( 1 );

        Disable(STATUS);
        Disable(FEEDBACK_FULL);

        LOGMSG="INSTALLATION COMPLETE";
        LOGWRITE(LOGMSG);

        SdFinish(WELCOME_TITLE + " Complete",
                         WELCOME_TITLE + " has finished copying files to your computer.",
                         "Click Finish to complete " + WELCOME_TITLE,
                         "", "", bTemp1, bTemp2);


        exit;


/*--------------- END OF SCRIPT --------------*\


                
/*---------------------------------------------*\
*
*       CheckDiskSpace
*
*       Checks the available disk space against the
*       amount requested and returns TRUE if the
*       requested space is available
*
\*---------------------------------------------*/
        
function CheckDiskSpace(nBytesRequired)
        NUMBER nActualSize;
        NUMBER nSpaceAvailable;
        NUMBER nReturn;
        STRING szNumber;
        STRING szMessage;
        BOOL bSpaceOK;
begin
        
        nSpaceAvailable = GetDiskSpace(szBaseDirectory);
    
        if (nSpaceAvailable < nBytesRequired) then
                NumToStr(szNumber, nBytesRequired / 1024);
                szMessage = szNumber + " Kbytes of disk space is required for this installation.\nThe targe drive has ";
                NumToStr(szNumber, nSpaceAvailable / 1024);
                szMessage = szMessage + szNumber + " Kbytes available.\n\nContinuing may result in an incomplete installation.\n\n";
                szMessage = szMessage + "Do you still want to install to \"" + szBaseDirectory + "\"?";
                
                nReturn = MessageBox(szMessage, MB_ICONEXCLAMATION + MB_TASKMODAL + MB_YESNO + MB_DEFBUTTON2);
                
                if (nReturn = IDYES) then
                        bSpaceOK = TRUE;
                else
                        bSpaceOK = FALSE;
                endif;
    else
        bSpaceOK = TRUE;
    endif;
    
    return bSpaceOK;

end;



/*---------------------------------------------------------------------------*\
 *
 * Function:  GetTLCPath
 *
 *  Purpose:  This function will ask user for TLC program path.
 *
 *
 *    Input: default TLC path
 *
 *  Returns: BACK or NEXT
 *
 * Comments: default TLC path will be changed upon return of the function.
\*---------------------------------------------------------------------------*/

function GetTLCPath()
        STRING szMsg;
begin

        szMsg = "Setup will copy the Default Trading Partner document files to the Destination Directory.\n\n";
        szMsg = szMsg + "To copy to this directory, click Next.\n\n";
        szMsg = szMsg + "To copy to a different directory, click Browse and select another\n";
        szMsg = szMsg + "directory.\n\n";

        if (AskDestPath("Enter TrustedLink Commerce Program File Location", szMsg, szTLCDir, 0) = BACK) then
                return BACK;
        else
                return NEXT;
        endif;

end;


function CheckTLCKey()
        STRING szTemp;
begin

        if (FindFile(szTLCDir, KEY_TLC, szTemp) = 0) then
                return EXISTS;
        else
                MessageBox("Trusted Link Program directory:\n\n'" +
                        szTLCDir + "' is not valid.", SEVERE);
                return NOTEXISTS;
        endif;
end;


// update factor.ini both server and local
function UpdateFactorIni()

        STRING szSrcINI, szTargetINI, szTargetWinINI, szOldValue, szNewValue;
begin
        szSrcINI = szBaseDirectory ^ "BIN";

        FindFile(szSrcINI, "FACTOR.INI", szOldValue);

        if (szOldValue = "") then
                TARGETDIR = szBaseDirectory ^ "BIN";
                DeleteFile("FACTOR.INI");
                return;
        endif;

        //update server and local factor.ini
        LOGMSG="START UPDATING SERVER AND LOCAL FACTOR.INI IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

        szSrcINI = szSrcINI ^ "FACTOR.INI";
        szTargetINI = szBaseDirectory ^ "FACTOR.INI";
        szTargetWinINI = WINDIR ^ "FACTOR.INI";

        if (GetProfString(szSrcINI, "MENUS", "ITEM1", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM1", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM1", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM1", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM1", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM1", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM1", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM1", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM1", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM1", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM1", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM2", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM2", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM2", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM2", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM2", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM2", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM2", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM2", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM2", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM2", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM2", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM3", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM3", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM3", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM3", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM3", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM3", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM3", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM3", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM3", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM3", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM3", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM4", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM4", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM4", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM4", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM4", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM4", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM4", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM4", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM4", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM4", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM4", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM5", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM5", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM5", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM5", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM5", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM5", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM5", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM5", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM5", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM5", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM5", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM6", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM6", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM6", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM6", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM6", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM6", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM6", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM6", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM6", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM6", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM6", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM7", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM7", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM7", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM7", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM7", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM7", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM7", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM7", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM7", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM7", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM7", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM8", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM8", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM8", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM8", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM8", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM8", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM8", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM8", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM8", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM8", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM8", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM9", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM9", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM9", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM9", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM9", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM9", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM9", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM9", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM9", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM9", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM9", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM10", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM10", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM10", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM10", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM10", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM10", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM10", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM10", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM10", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM10", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM10", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM11", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM11", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM11", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM11", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM11", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM11", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM11", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM11", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM11", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM11", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM11", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM12", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM12", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM12", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM12", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM12", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM12", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM12", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM12", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM12", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM12", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM12", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM13", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM13", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM13", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM13", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM13", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM13", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM13", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM13", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM13", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM13", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM13", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM14", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM14", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM14", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM14", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM14", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM14", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM14", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM14", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM14", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM14", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM14", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM15", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM15", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM15", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM15", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM15", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM15", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM15", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM15", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM15", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM15", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM15", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM16", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM16", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM16", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM16", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM16", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM16", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM16", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM16", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM16", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM16", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM16", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM17", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM17", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM17", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM17", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM17", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM17", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM17", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM17", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM17", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM17", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM17", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM18", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM18", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM18", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM18", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM18", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM18", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM18", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM18", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM18", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM18", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM18", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM19", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM19", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM19", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM19", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM19", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM19", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM19", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM19", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM19", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM19", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM19", szOldValue, "");
                endif;
        endif;

        if (GetProfString(szSrcINI, "MENUS", "ITEM20", szNewValue) = 0) then
                if (GetProfString(szTargetINI, "MENUS", "ITEM20", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM20", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetINI, "MENUS", "ITEM20", szNewValue);
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM20", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM20", szOldValue, szNewValue);
                else
                        WriteProfString(szTargetWinINI, "MENUS", "ITEM20", szNewValue);
                endif;
        else
                if (GetProfString(szTargetINI, "MENUS", "ITEM20", szOldValue) = 0) then
                        ReplaceProfString(szTargetINI, "MENUS", "ITEM20", szOldValue, "");
                endif;

                if (GetProfString(szTargetWinINI, "MENUS", "ITEM20", szOldValue) = 0) then
                        ReplaceProfString(szTargetWinINI, "MENUS", "ITEM20", szOldValue, "");
                endif;
        endif;

        TARGETDIR = szBaseDirectory ^ "BIN";
        DeleteFile("FACTOR.INI");

        LOGMSG="END UPDATING SERVER AND LOCAL FACTOR.INI IN : " + szBaseDirectory;
	LOGWRITE(LOGMSG);

	return;
end;


//update factor.ini - EDI section
function WriteEDIprofile()

        STRING szOldValue, szNewValue, szFind, szTemp, szSub;
        NUMBER nPosi;

begin

        LOGMSG="START UPDATING LOCAL FACTOR.INI [EDI]";
	LOGWRITE(LOGMSG);

        szNewValue = szBaseDirectory ^ "EDI";

        if (GetProfString("FACTOR.INI", "EDI", "Comm PC EDI Directory", szOldValue) = 0) then
                ReplaceProfString("FACTOR.INI", "EDI", "Comm PC EDI Directory", szOldValue, szNewValue);
        else
                WriteProfString("FACTOR.INI", "EDI", "Comm PC EDI Directory", szNewValue);
        endif;

        szNewValue = szLocalDisk ^ APP_BASE_PATH ^ "EDI" ^ "Hold";

        if (GetProfString("FACTOR.INI", "EDI", "User PC EDI Directory", szOldValue) = 0) then
                ReplaceProfString("FACTOR.INI", "EDI", "User PC EDI Directory", szOldValue, szNewValue);
        else
                WriteProfString("FACTOR.INI", "EDI", "User PC EDI Directory", szNewValue);
        endif;

        szNewValue = szLocalDisk ^ APP_BASE_PATH ^ "EDI" ^ "Transmit";

        if (GetProfString("FACTOR.INI", "EDI", "Factor EDI Directory", szOldValue) = 0) then
                ReplaceProfString("FACTOR.INI", "EDI", "Factor EDI Directory", szOldValue, szNewValue);
        else
                WriteProfString("FACTOR.INI", "EDI", "Factor EDI Directory", szNewValue);
        endif;

        szNewValue = szTLCDir ^ "EXCHANGE" ^ "INBOUND";

        if (GetProfString("FACTOR.INI", "EDI", "TLC Inbound Directory", szOldValue) = 0) then
                ReplaceProfString("FACTOR.INI", "EDI", "TLC Inbound Directory", szOldValue, szNewValue);
        else
                WriteProfString("FACTOR.INI", "EDI", "TLC Inbound Directory", szNewValue);
        endif;

        szNewValue = szTLCDir ^ "EXPORT";

        if (GetProfString("FACTOR.INI", "EDI", "TLC Export Directory", szOldValue) = 0) then
                ReplaceProfString("FACTOR.INI", "EDI", "TLC Export Directory", szOldValue, szNewValue);
        else
                WriteProfString("FACTOR.INI", "EDI", "TLC Export Directory", szNewValue);
        endif;

        LOGMSG="END UPDATING LOCAL FACTOR.INI [EDI]";
	LOGWRITE(LOGMSG);

        szFind = szTLCDir ^ "DEDISCH.EXE";

        if (GetProfString("WIN.INI", "windows", "run", szOldValue) = 0) then
                LOGMSG="START UPDATING WIN.INI [windows] run=";
                LOGWRITE(LOGMSG);

                szNewValue = "";

                //remove C:\HARB\TLC\DEDISCH.EXE From run keyword
                StrToUpper(szTemp, szOldValue);

                nPosi = StrFind(szTemp, szFind);

                if (nPosi >= 0) then
                        if (StrLength(szOldValue) = StrLength(szFind)) then
                                ReplaceProfString("WIN.INI", "windows", "run", szOldValue, szNewValue);
                                return;
                        endif;

                        if (nPosi > 0) then
                                StrSub(szSub, szTemp, 0, nPosi);
                                szNewValue = szSub;
                        endif;

                        StrSub(szTemp, szTemp, nPosi + 23, StrLength(szTemp) - nPosi - 23);
                        StrSub(szSub, szTemp, 0, 1);

                        if (szSub = ";") then
                                StrSub(szTemp, szTemp, 1, StrLength(szTemp) - 1);
                        endif;

                        szNewValue = szNewValue + szTemp;

                        ReplaceProfString("WIN.INI", "windows", "run", szOldValue, szNewValue);
                endif;

                LOGMSG="START UPDATING WIN.INI [windows] run=";
                LOGWRITE(LOGMSG);
        endif;

end;


// write log function
function LOGWRITE(logline)

begin
	logline=logline + "\n";
	WriteLine( nvFileOut, logline);
	return;
end;


#include "sddialog.rul"

