//********************************************************************************
//
// Installation script for the ProfitTrak Module release Server
//  
// This setup will run from Factmenu, or Standalocal, or Both (AutoCheck Factmenu)
//
//********************************************************************************

// includes

#include "winapi.h"

// constants
#define PRODUCT_VERSION         "3.00"  //CHANGE THE VESION BEFORE BUILDING DISK
#define DEINSTALL_KEY           "PT300"
#define UNINSTALL_NAME          "ProfitTrak System Version 3.00"


#define SIZE_REQ_SERVER         9

#define PRODUCT_NAME            "ProfitTrak System Module"
#define MODULE_NAME             "ProfitTrak System"
#define APP_KEY_FILE            "ptecklst.exe"
#define KEY_DEFAULT             "PT"
#define HELP_FILE               "ProfitTrak.hlp"
#define KEY_CLIENT_PATH         "PT Client Path"
#define KEY_SERVER_PATH         "PT Server Path"
#define KEY_REMOTE              "PTRemote"
#define WELCOME_TITLE           "ProfitTrak System Module Server Installation"

#define COMPANY_NAME		"FACTOR"
#define APP_EXECTRAK_PATH	"Factor\\ExecTrak"
#define APP_FACTOR_PATH		"Factor"
#define PRODUCT_SUBDIR		"ExecTrak"



#define FACTMENU_KEY             "FACTMENU.EXE"

#define PROGRAM_SIZE            3

#define APP_BASE_PATH           "Factor\\ExecVisn"
#define APP_INI_PATH            "J:\\Factor\\ExecVisn"
#define PROGRAM_GROUP           "ExecuVision"


#define KEY_EXECUVISION         "ExecuVision"

#define PRODUCT_KEY             "iqfact.exe"
#define FACTOR_KEY              "factmenu.exe"
#define KEY_IQ                  "iqvc32.exe"

#define IQ_DEFAULT_DIR          "C:\\IQ\\VISION"



// global variables

declare

#include "sddialog.h"

	//log setup variables and write log function prototype
	NUMBER nvFileOut;
	STRING INSTALL_OPTION,INSTALL_LINE;
	STRING INSWARN,LOGMSG,RESULTLOG;
	
	prototype LOGWRITE(STRING);
	
	NUMBER nReturn, nTemp;
	
	STRING KEY_ROOT, KEY_PRODUCT, KEY_VERSION;
	STRING szBaseDirectory, szDestMsg, svUninstLogFile, szINIDirectory;
	STRING szMsg, szNumber, szTemp, szFolder, szDisk, szSource, szId;
	STRING szSCIcon, szSCExe, szSCWork, szAppDir, szProgram, szIQDir;
	STRING szOldRunValue, szNewRunValue, szComponents, svFileName;      
	STRING szDBFrom, szDBTo, szForceInstall, szEXECTRAKDirectory;
	
	BOOL bRunStandAlone, bTemp1, bTemp2, bZFailure, bExists16Bit, bCopyINI;
	BOOL bAlreadyAsk;	
	LIST    listInfo;
	
	// function prototypes
	prototype CheckDiskSpace(number);
	prototype Is16BitFactMenu();
	
	prototype CopySetup();
	prototype CopyLocalDB(STRING);
	prototype fnFindFile(STRING, STRING);
	prototype fnFinishReboot(STRING);
	prototype CheckExistsDir(STRING);
	prototype IsExists16BitVersion(STRING);
	prototype UpdateIQFACTINI();
	prototype FindAndReplace(STRING, STRING, STRING);
	prototype AddModule(STRING);
	prototype GetIQVISIONPath();
	prototype CheckIQKey();
	

// the script starts here
program

StartHere:


	// the script starts here
	StrSub(szTemp, CMDLINE, 0, 8);
	if szTemp = "CPYLOCAL" then
		CopyLocalDB("Second");
		exit;
	endif;

	//set installation header
	if (SetFont(FONT_TITLE, 0, "Arail") < 0) then
	        szMsg = "Installing " + PRODUCT_NAME;
	        if (CMDLINE = "-A" || CMDLINE = "-a") then
	                szMsg = szMsg + "\nForced Installation";
	        endif;
	        szMsg = szMsg + "\nVersion " + PRODUCT_VERSION;
	        SetTitle(szMsg , 18, WHITE );
	else
	        szMsg = "Installing " + "ExecuTrak" + "™ " + MODULE_NAME + " Module";
	        if (CMDLINE = "-A" || CMDLINE = "-a") then
	                szMsg = szMsg + "\nForced Installation";
	        endif;
	        szMsg = szMsg + "\nVersion " + PRODUCT_VERSION;
	        SetTitle(szMsg, 18, WHITE );
	
	endif;

// ************************* Check for user defined command line
	INSTALL_OPTION=PRODUCT_NAME + " " + PRODUCT_VERSION;        
	INSTALL_LINE=CMDLINE;

	if( CreateFile( nvFileOut, WINSYSDIR, KEY_DEFAULT + "SETUP.TXT" ) < 0 ) then
	
		MessageBeep( 0 );
		MessageBox( KEY_DEFAULT + "SETUP.TXT could not be opened", SEVERE );
		abort;
	else
		LOGMSG=INSTALL_OPTION + " SETUP PARAM= " + INSTALL_LINE;
		LOGWRITE(LOGMSG);
			
	endif;   

	if (CMDLINE = "-A" || CMDLINE = "-a") then
		INSTALL_OPTION=INSTALL_OPTION + "\n      FORCED INSTALLATION";
		MessageBox("WARNING!  You are about to perform a " + "FORCED INSTALLATION of\n\n" + PRODUCT_NAME + " " + PRODUCT_VERSION
	                + "\n\nThis will OVERWRITE ALL FILES associated with this program,\nand may effect the operation of other programs that use the same files.\n\nPress 'Cancel' on the next screen and \n'Exit Setup' if you do not wish to do this.", WARNING);
	        szForceInstall = "1 ";
	else
	        szForceInstall = "0 ";
	endif;
// ************************* 

	// set registry keys
	KEY_ROOT = "SOFTWARE\\" + COMPANY_NAME;
	KEY_PRODUCT = KEY_ROOT + "\\" + PRODUCT_NAME;
	KEY_VERSION = KEY_PRODUCT + "\\" + PRODUCT_VERSION;
	
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

	// set title for all dialog boxes
	SetDialogTitle(DLG_ASK_OPTIONS, WELCOME_TITLE);
	SetDialogTitle(DLG_ASK_TEXT, WELCOME_TITLE);
	SetDialogTitle(DLG_ASK_YESNO, WELCOME_TITLE);
	SetDialogTitle(DLG_MSG_INFORMATION, WELCOME_TITLE);
	SetDialogTitle(DLG_MSG_SEVERE, WELCOME_TITLE);
	SetDialogTitle(DLG_MSG_WARNING, WELCOME_TITLE);
	SetDialogTitle(DLG_USER_CAPTION, WELCOME_TITLE);

	//**************************************************
	//
	//		         MAIN INSTALLATION
	//
	//**************************************************

MainInstallation:
        // set installation information
        Enable( INDVFILESTATUS );
        InstallationInfo(COMPANY_NAME, PRODUCT_NAME, PRODUCT_VERSION, PRODUCT_KEY);

	Enable(DIALOGCACHE);

        
SayWelcome:
        // welcome message and get desired target path
        Disable(BACKBUTTON);

        szMsg = "Welcome to the " + PRODUCT_NAME + " Setup program.  This " +
            "program will install " + PRODUCT_NAME + " on your computer.";

        SdWelcome(WELCOME_TITLE, szMsg);

        Enable(BACKBUTTON);

        // check the registry - if old installation exists.
        if (RegDBGetKeyValueEx(KEY_VERSION, KEY_EXECUVISION, nReturn, szTemp, nTemp) = 0) then
                szBaseDirectory = szTemp;
                ParsePath(szTemp, szBaseDirectory, DISK);
                szBaseDirectory = szTemp ^ APP_BASE_PATH;
                //szBaseDirectory = "J:" ^ APP_BASE_PATH;
        else
                szBaseDirectory = TARGETDISK ^ APP_BASE_PATH;
                //szBaseDirectory = "J:" ^ APP_BASE_PATH;
        endif;

        NumToStr(szNumber, PROGRAM_SIZE * 1024);



GetIQVisionInfo:

	Disable(BACKBUTTON);
	
	szIQDir = IQ_DEFAULT_DIR;

        	if (!fnFindFile(szIQDir, KEY_IQ)) then
		szDestMsg = "Have you installed the IQ/VISION software?";
		szTemp = "Choose No to continue with the IQ/VISION " +
		     "installation after the " + WELCOME_TITLE + " has completed.\n\n" +
		     "Choose Yes to skip the IQ/VISION installation.";
		szComponents = "IQVISION";
		
		bTemp1 = FALSE;
		bTemp2 = TRUE;
		ComponentAddItem(szComponents, "N&o", 1024,bTemp1);
		ComponentAddItem(szComponents, "&Yes", 2048,bTemp2);
		
		SdAskOptions("IQ/VISION Installation Option", szDestMsg, szTemp, szId, szComponents, EXCLUSIVE);

                	if (ComponentIsItemSelected(szComponents, "N&o")) then
		                MessageBox("Please install IQ/VISION software before " +
		                        "installing the " + PRODUCT_NAME + ".", INFORMATION);
			abort;
		endif;
        	endif;


GetIQVisionPath:

        Enable(BACKBUTTON);
        	
	if (!fnFindFile(szIQDir, KEY_IQ)) then
		if (GetIQVISIONPath() = BACK) then
		        goto GetIQVisionInfo;
		endif;

	                if (CheckIQKey() = NOTEXISTS) then
	                        goto GetIQVisionPath;
	                endif;
	endif;

	StrToUpper(szIQDir, szIQDir);


GetTargetPath1:
	Disable(BACKBUTTON);

        szDestMsg = "Setup will install some " + KEY_EXECUVISION + " in the Destination Directory.\n\n";
        szDestMsg = szDestMsg + "To install to this directory, click Next.\n\n";
        szDestMsg = szDestMsg + "To install to a different directory, click Browse and select another\n";
        szDestMsg = szDestMsg + "directory.\n\n";
        szDestMsg = szDestMsg + "You can choose not to install " + PRODUCT_NAME + " by clicking Cancel to\n";
        szDestMsg = szDestMsg + "exit Setup.\n\n";
        szDestMsg = szDestMsg + PRODUCT_NAME + " requires " + szNumber + " Kbytes of free disk space.\n";

        if (AskDestPath("Choose " + PRODUCT_NAME + " Programs Location", szDestMsg, szBaseDirectory, 0) = BACK) then
            goto SayWelcome;
        endif;

        // make sure destination directory is \factor\execvisn
        szTemp = szBaseDirectory ^ "";
        StrToLower(szTemp, szTemp);

        ParsePath(szFolder, szBaseDirectory, DISK);
        StrToLower(szFolder, szFolder);

        nTemp = StrFind(szTemp, szFolder ^ "factor\\execvisn");

        StrToUpper(szFolder, szFolder);

        if (nTemp < 0) then   //incorrect directory
                szMsg = PRODUCT_NAME + " Program Directory '" +
                    szBaseDirectory ^ "" + "' is not valid.\n\n";
                szMsg = szMsg + PRODUCT_NAME + " will be installed to '" +
                    szFolder ^ APP_BASE_PATH + "' directory.";

                MessageBox(szMsg, MB_ICONEXCLAMATION + MB_TASKMODAL);
        endif;

        szBaseDirectory = szFolder ^ APP_BASE_PATH;

        // check available disk space
        if (CheckDiskSpace(PROGRAM_SIZE * 1024 * 1024) = FALSE) then
                goto GetTargetPath1;
        endif;


Check16BitExecVisn:
        bExists16Bit = IsExists16BitVersion(szBaseDirectory ^ "Bin");

        if (bExists16Bit) then
                if (AskYesNo( "32-Bit ExecuVision Installation will overwrite " +
                   "the 16-Bit ExecuVision program. Are you sure you want to " +
                   "continue?", NO) = NO) then
                        szMsg = PRODUCT_NAME + " Installation terminates.";
                        MessageBox(szMsg, MB_ICONEXCLAMATION + MB_TASKMODAL);
                        abort;
                endif;
        endif;

        szINIDirectory = APP_INI_PATH;


GetAppINIPath:
        szDestMsg = "Setup will store some  " + KEY_EXECUVISION + " INI files in the Destination Directory.\n\n";
        szDestMsg = szDestMsg + "To store to this directory, click Next.\n\n";
        szDestMsg = szDestMsg + "To store to a different directory, click Browse and select another\n";
        szDestMsg = szDestMsg + "directory.\n\n";
    
        Enable(BACKBUTTON);

        if (AskDestPath("Choose " + PRODUCT_NAME + " INI files Location", szDestMsg, szINIDirectory, 0) = BACK) then
            goto GetTargetPath1;
        endif;

        if (CheckExistsDir(szINIDirectory) != EXISTS) then
                goto GetAppINIPath;
        endif;

        // make sure INI directory is \factor\execvisn
        szTemp = szINIDirectory ^ "";
        StrToLower(szTemp, szTemp);

        ParsePath(szFolder, szINIDirectory, DISK);
        StrToLower(szFolder, szFolder);

        nTemp = StrFind(szTemp, szFolder ^ "factor\\execvisn");

        StrToUpper(szFolder, szFolder);

        if (nTemp < 0) then   //incorrect directory
                szMsg = PRODUCT_NAME + " INI Directory '" +
                    szINIDirectory ^ "" + "' is not valid.\n\n";
                szMsg = szMsg + PRODUCT_NAME + " INI directory will be set to '" +
                    szFolder ^ APP_BASE_PATH + "'.";

                MessageBox(szMsg, MB_ICONEXCLAMATION + MB_TASKMODAL);
        endif;

        szINIDirectory = szFolder ^ APP_BASE_PATH;


        
        szINIDirectory = szFolder ^ APP_BASE_PATH;
        
	
InstallationType:

	// is this a stand-alone installation?
	szComponents = "PC Server Installation";
	ComponentAddItem(szComponents, "PC Server Installation", 1024, TRUE);
	ComponentAddItem(szComponents, "Stand-alone PC Installation", 2000, FALSE);
	
	szTemp = "";
        if (SdAskOptions("Select Installation Type", "Choose the installation type by clicking " +
                 "the circle next to the appropriate option.",
                 "Once you have selected the installation type, click the Next " +
                 "button to continue.", szTemp, szComponents, EXCLUSIVE) = BACK) then

           goto GetAppINIPath;

        endif;

	if (ComponentIsItemSelected(szComponents,"PC Server Installation")) then
                bRunStandAlone = FALSE;
	else
                bRunStandAlone = TRUE;
	endif;

	NumToStr(szNumber, SIZE_REQ_SERVER * 1024);

        if (bRunStandAlone) then
                szEXECTRAKDirectory = TARGETDISK ^ APP_EXECTRAK_PATH;
        else
                szEXECTRAKDirectory = "J:" ^ APP_EXECTRAK_PATH;
        endif;


// get target path for local installation
GetTargetPath2:
        szDestMsg = "Setup will install " + PRODUCT_NAME + " server files in the Destination Directory.\n\n";
        szDestMsg = szDestMsg + "To install to this directory, click Next.\n\n";
        szDestMsg = szDestMsg + "To install to a different directory, click Browse and select another ";
        szDestMsg = szDestMsg + "directory.\n\n";
        szDestMsg = szDestMsg + "You can choose not to install " + PRODUCT_NAME + " server files by clicking Cancel to";
	szDestMsg = szDestMsg + " exit Setup.\n\n";
	szDestMsg = szDestMsg + PRODUCT_NAME + " requires " + szNumber + " Kbytes of free disk space.\n";
    
        if (AskDestPath("", szDestMsg, szEXECTRAKDirectory, 0) = BACK) then

                goto InstallationType;

        endif;

	// check available disk space
	if (CheckDiskSpace(SIZE_REQ_SERVER * 1024 * 1024) = FALSE) then
		goto GetTargetPath2;
	endif;

        ParsePath(szDisk, szEXECTRAKDirectory, DISK);
        szEXECTRAKDirectory = szDisk ^ APP_EXECTRAK_PATH;
	

// search for factmenu.exe
Find_FactMenu:
        if (FindFile(szEXECTRAKDirectory, FACTOR_KEY, szFolder) >= 0) then
                if (Is16BitFactMenu()) then
                        MessageBeep(0);
                        MessageBox("Please install the ExecuTrak 32-bit base system BEFORE installing this module.\n\nSetup will be terminated.", SEVERE);
                        abort;
                endif;

                goto SetupRegAndUninstall;
        endif;


FactMenuNotFound:
        Disable(HOURGLASS);
        SdShowMsg("", FALSE);

        Disable(BACKBUTTON);            // disable < Back button

        szMsg   = "Setup cannot find ExecuTrak Base System Program '" + FACTOR_KEY + "'\n\n" +
                "Setup will be terminated.";

        MessageBox(szMsg,SEVERE);
        abort;
        
SetupRegAndUninstall:
        // Prepare InstallShield to record deinstallation information.
        DeinstallStart( szBaseDirectory, svUninstLogFile, DEINSTALL_KEY, 0 );
        RegDBSetItem( REGDB_UNINSTALL_NAME, UNINSTALL_NAME );

        // Set the App Paths key for the main program.
        szAppDir = szBaseDirectory ^ "BIN";
        RegDBSetItem( REGDB_APPPATH, szAppDir );
        szProgram = szAppDir + "\\ptecklst.exe";
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szProgram );

ConfirmCopy:
        // Show SdStartCopy dialog to confirm file transfer operation.
        listInfo = ListCreate( STRINGLIST );

        //Construct the Info List
        ListAddString(listInfo, PRODUCT_NAME + " program directory:", AFTER);
        ListAddString(listInfo, "        " + szBaseDirectory, AFTER);
        ListAddString(listInfo, "", AFTER);
        ListAddString(listInfo, PRODUCT_NAME + " INI directory:", AFTER);
        ListAddString(listInfo, "        " + szINIDirectory, AFTER);
        ListAddString(listInfo, "", AFTER);

        if (bExists16Bit) then
                ListAddString(listInfo, "Overwrite 16-Bit ExecuVision Program:", AFTER);
                ListAddString(listInfo, "        Yes", AFTER);
                ListAddString(listInfo, "", AFTER);
        endif;

        ListAddString(listInfo, PRODUCT_NAME + " Program Folder:", AFTER);
        ListAddString(listInfo, "        Programs\\Factor\\" + PRODUCT_NAME, AFTER);

        szMsg = "Setup has enough information to start copying " + PRODUCT_NAME + " files.  " +
                "If you want to review or change any settings, click Back.  If you are " +
                "satisfied with the settings, click Next to begin copying files.";
        if ( SdStartCopy( "Confirm Current Settings", szMsg, listInfo ) = BACK ) then
           ListDestroy( listInfo );
           goto GetTargetPath2;
        endif;
        ListDestroy( listInfo );


        // Set the App Paths key for the main program.
        szAppDir = szBaseDirectory ^ "BIN";
        RegDBSetItem( REGDB_APPPATH, szAppDir );
        szProgram = szAppDir + "\\iqfactmt.exe";
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szProgram );
        

StartCopy:

	CopySetup();

	SetStatusWindow(0, "Copying " + PRODUCT_NAME + " server files...");
        Enable(STATUS);
	Enable(SELFREGISTERBATCH);
	FileSetBeginDefine("All Files");  // begin of define fileset +++++++++++++++++
        StatusUpdate(ON, 90);

// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES

	TARGETDIR = WINDIR ^ "TEMP";
	szSource = TARGETDIR;

	LOGMSG="START FORCED COPY OF " + KEY_DEFAULT + "client FILES IN " + TARGETDIR;
	LOGWRITE(LOGMSG);
	
	nReturn = CompressGet(KEY_DEFAULT + "client.z", "*.*", COMP_NORMAL);
	if (nReturn < 0) then
		MessageBox(KEY_DEFAULT + "CLIENT.Z could not be decompressed", SEVERE);
		goto DecompressError;
	endif;

        	LOGMSG="END FORCED COPY OF " + KEY_DEFAULT + "client.z FILES IN " + TARGETDIR;
	LOGWRITE(LOGMSG);
	
// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES

	TARGETDIR = szBaseDirectory;
	
	if (CMDLINE = "-A" || CMDLINE = "-a") then
				
                LOGMSG="START FORCED COPY OF ptini FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                // These go into the window directory
                if (CompressGet("ptini.z", "*.*", COMP_NORMAL| INCLUDE_SUBDIR) < 0) then
                        MessageBox("PTINI.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
                LOGMSG="END FORCED COPY OF ptini FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);	
	else     
// ************************* Normal install

                LOGMSG="START Normal COPY OF ptini FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                // These go into the window directory
                if (CompressGet("ptini.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      		COMP_UPDATE_SAME | INCLUDE_SUBDIR) < 0) then
                        MessageBox("PTINI.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
                LOGMSG="END Normal COPY OF ptini FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
	endif;
	

// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES

	
	if (CMDLINE = "-A" || CMDLINE = "-a") then
				
                LOGMSG="START FORCED COPY OF ptmodels FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                // These go into the FACTOR\Execvisn directory
                if (CompressGet("ptmodels.z", "*.*", COMP_NORMAL | INCLUDE_SUBDIR) < 0) then
                        MessageBox("ptmodels.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
                LOGMSG="END FORCED COPY OF ptmodels FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
	else     
// ************************* Normal install

                LOGMSG="START Normal COPY OF ptmodels FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                // These go into the FACTOR\Execvisn directory
                if (CompressGet("ptmodels.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      		COMP_UPDATE_SAME  | INCLUDE_SUBDIR) < 0) then
                        MessageBox("ptmodels.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
                LOGMSG="END Normal COPY OF ptmodels FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
	endif;

// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES
	if (CMDLINE = "-A" || CMDLINE = "-a") then
				
                LOGMSG="START FORCED COPY OF ptiqbin.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                // These go into the window directory
                if (CompressGet("ptiqbin.z", "*.*", COMP_NORMAL| INCLUDE_SUBDIR) < 0) then
                        MessageBox("PTINI.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
                LOGMSG="END FORCED COPY OF ptiqbin.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);	
	else     
// ************************* Normal install

                LOGMSG="START Normal COPY OF ptini FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                // These go into the window directory
                if (CompressGet("ptiqbin.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      COMP_UPDATE_SAME | INCLUDE_SUBDIR) < 0) then
                        MessageBox("ptiqbin.z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
                LOGMSG="END Normal COPY OF ptini FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
	endif;


// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES

	if (CMDLINE = "-A" || CMDLINE = "-a") then

                
                TARGETDIR = szBaseDirectory ^ "OLE";

                LOGMSG="START FORCED COPY OF factole.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("factole.z", "*.*", COMP_NORMAL | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("FACTOLE.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END FORCED COPY OF factole.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);

                TARGETDIR = WINSYSDIR;

                LOGMSG="START FORCED COPY OF custctl.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("custctl.z", "*.*", COMP_NORMAL | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("CUSTCTL.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END FORCED COPY OF custctl.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
        
                LOGMSG="START FORCED COPY OF factdll.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);
        
                if (CompressGet("factdll.z", "*.*", COMP_NORMAL | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("FACTDLL.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
        
                LOGMSG="END FORCED COPY OF factdll.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                LOGMSG="START FORCED COPY OF rtm.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("rtm.z", "*.*", COMP_NORMAL | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("RTM.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END FORCED COPY OF rtm.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);

                // decompress dao3032.dll to \Program Files\Common Files\Microsoft Shared\DAO and register it.
                TARGETDIR = WINSYSDISK ^ "Program Files\\Common Files\\Microsoft Shared\\DAO";

                LOGMSG="START FORCED COPY OF shared.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("shared.z", "*.*", COMP_NORMAL | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("SHARED.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END FORCED COPY OF shared.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);

	else

// ************************* Normal install
                 
                TARGETDIR = szBaseDirectory ^ "OLE";
        
                LOGMSG="START NORMAL COPY OF factole.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);
        
                if (CompressGet("factole.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      COMP_UPDATE_SAME | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("FACTOLE.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END NORMAL COPY OF factole.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                TARGETDIR = WINSYSDIR;

                LOGMSG="START NORMAL COPY OF custctl.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);
        
                if (CompressGet("custctl.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      COMP_UPDATE_SAME | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("CUSTCTL.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;
        
                LOGMSG="END NORMAL COPY OF custctl.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                LOGMSG="START NORMAL COPY OF factdll.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("factdll.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      COMP_UPDATE_SAME | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("FACTDLL.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END NORMAL COPY OF factdll.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);

                LOGMSG="START NORMAL COPY OF rtm.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("rtm.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      COMP_UPDATE_SAME | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("RTM.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END NORMAL COPY OF rtm.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);

                // decompress dao3032.dll to \Program Files\Common Files\Microsoft Shared\DAO and register it.
                TARGETDIR = WINSYSDISK ^ "Program Files\\Common Files\\Microsoft Shared\\DAO";

                LOGMSG="START NORMAL COPY OF shared.z FILES IN " + TARGETDIR;
                LOGWRITE(LOGMSG);

                if (CompressGet("shared.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | 
	      COMP_UPDATE_SAME | SHAREDFILE | SELFREGISTER) < 0) then
                        MessageBox("SHARED.Z could not be decompressed", SEVERE);
                        goto ZFailure;
                endif;

                LOGMSG="END NORMAL COPY OF shared.z FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);

	endif;



	FileSetEndDefine("All Files");
	
	nReturn = FileSetPerformEz("All Files", 0);
	
	if (nReturn != FS_DONE) then
	        LOGMSG="ERRORFILENAME=" + ERRORFILENAME;
	        LOGWRITE(LOGMSG);
	endif;
	
	switch(nReturn)
	        case FS_CREATEDIR:
	                 MessageBox("Failed to Create target directory", SEVERE);
	                 goto ZFailure;
	         case FS_PACKAGING:
	                 MessageBox("Unable to find file in package list", SEVERE);
	                 goto ZFailure;
	         case FS_FILENOTINLIB:
	                 MessageBox("Unable to find target file in compressed lib", INFORMATION);
	                 goto ZFailure;
	         case FS_DONE:
	                 // do nothing
		 default:
	                 MessageBox("General file copy failure", SEVERE);
	                 goto ZFailure;
	endswitch; 

	//set Source directory to Target directory
	
	SRCDIR = szSource;
	TARGETDIR = WINDIR ^ "TEMP";
	
	//extract the local database into xxclient directory
	LOGMSG="START FORCED COPY OF localdb FILES IN " + TARGETDIR;
	LOGWRITE(LOGMSG);
	
	if (CompressGet("localdb.z", "*.*", COMP_NORMAL) < 0) then
		MessageBox(SRCDIR + " LOCALDB.Z could not be decompressed", SEVERE);
		goto DecompressError;
	endif;
	
	LOGMSG="END FORCED COPY OF localdb FILES IN " + TARGETDIR;
	LOGWRITE(LOGMSG);	  
	
// ************************* if command line =-a then FORCED INSTALLATION of ALL FILES

	TARGETDIR = szEXECTRAKDirectory;
	  

	if (CMDLINE = "-A" || CMDLINE = "-a") then

		LOGMSG="START FORCED COPY OF ptbin FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
		
		nReturn = CompressGet("ptbin.z", "*.*", COMP_NORMAL | INCLUDE_SUBDIR);
		if (nReturn < 0) then
		        MessageBox("PTBIN.Z could not be decompressed", SEVERE);
		        goto DecompressError;
		endif;
		
		LOGMSG="END FORCED COPY OF ptbin FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);   
			
	else     
// ************************* Normal install

		LOGMSG="START NORMAL COPY OF ptbin FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG);
		
		nReturn = CompressGet("ptbin.z", "*.*", COMP_UPDATE_VERSION | COMP_UPDATE_DATE | COMP_UPDATE_SAME | INCLUDE_SUBDIR);
		if (nReturn < 0) then
		        MessageBox("PTBIN.Z could not be decompressed", SEVERE);
		        goto DecompressError;
		endif;
		
		LOGMSG="END NORMAL COPY OF ptbin FILES IN " + TARGETDIR;
		LOGWRITE(LOGMSG); 
		
	endif;
	
    
        
        
DecompressError:
	if (nReturn < 0) then 
	        LOGMSG="ERRORFILENAME=" + ERRORFILENAME;
	        LOGWRITE(LOGMSG);
	
	        switch(nReturn)
	                case COMP_DONE:
	                        MessageBox("Indicates the function successfully decompressed the files from the library.", SEVERE);
	                case COMP_ERR_CREATEDIR:
	                        MessageBox("A target directory could not be created.  Make sure that the path in the TARGETDIR system variable is syntactically correct and you have access rights to the target drive.", SEVERE);
	                case COMP_ERR_FILENOTINLIB:
	                        MessageBox("The specified target file does not exist in the specified compressed library.  Use the InstallShield Data Compression Program (ICOMP.EXE at the DOS system prompt) with the -L (listing) option to view the contents of the compressed library and determine if the file specified is located in the library.", SEVERE);
	                case COMP_ERR_INCOMPATIBLE:
	                        MessageBox("The library file is not compatible with InstallShield's compression format.", SEVERE);
	                case COMP_ERR_MEMORY:
	                        MessageBox("The function cannot allocate the memory needed to complete the process.", SEVERE);
	                case COMP_ERR_NODISKSPACE:
	                        MessageBox("The function cannot locate enough free space on the target disk.", SEVERE);
	                case COMP_ERR_OPENINPUT:
	                        MessageBox("The function cannot create input files in the target directory.", SEVERE);
	                case COMP_ERR_OPENOUTPUT:
	                        MessageBox("The function cannot find or open the output file from the source directory.", SEVERE);
	                case COMP_ERR_OPTIONS:
	                        MessageBox("The specified nOptions is invalid.", SEVERE);
	                case COMP_ERR_TARGETREADONLY:
	                        MessageBox("The file in TARGETDIR is read-only.", SEVERE);
	                default:
	                        MessageBox("General decompression failure", SEVERE);
	        endswitch;
	        goto ZFailure;
	endif;


DecompressSuccessful:

	SetStatusWindow(92, "Registering DLLs and Ocxes...");
	
	Do(SELFREGISTRATIONPROCESS);
	
	
	LaunchAppAndWait(szBaseDirectory ^ "OLE" ^ "PPLINE32.EXE", "", WAIT);
	LaunchAppAndWait(szBaseDirectory ^ "OLE" ^ "TCLCOM32.EXE", "", WAIT);
	LaunchAppAndWait(szBaseDirectory ^ "OLE" ^ "FACTOLE.EXE", "", WAIT);
	
	
	StatusUpdate(OFF, 0);
	
	// Run the client installation?
	if (bRunStandAlone) then
	        
	        // create folder shortcuts
	        szFolder = COMPANY_NAME ^ "ExecuTrak";
	        szAppDir = szEXECTRAKDirectory;
	        szSCWork = szAppDir;
	        szSCIcon = "";
	
	        szSCExe = szSCWork ^ HELP_FILE;
        	AddFolderIcon(szFolder, "ProfitTrak Help",
                                  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);
		
	else
		TARGETDIR = szDisk ^ APP_FACTOR_PATH ^ "Clients" ^ PRODUCT_SUBDIR;
		SRCDIR = WINDIR ^ "TEMP";
		XCopyFile(KEY_DEFAULT + "bin.z", KEY_DEFAULT + "bin.z", COMP_NORMAL);
		XCopyFile("localdb.z", "localdb.z", COMP_NORMAL);
				
	        LOGMSG="NO FOLDER SHORTCUTS NEEDED FOR SERVER INSTALLATION";
	        LOGWRITE(LOGMSG);
	        
	        AddModule(TARGETDIR);
	endif;
        
        TARGETDIR = WINDIR ^ "TEMP";

        // remove the z files 
        LOGMSG="DELETE Z FILES IN " + TARGETDIR;
        LOGWRITE(LOGMSG);

        DeleteFile(KEY_DEFAULT + "bin.z");
	DeleteFile("localdb.z");
	
CopyINIDirectory:
        SetStatusWindow(94, "Creating ExecuVision INI directory...");

        VarSave(SRCTARGETDIR);

        if (szINIDirectory != szBaseDirectory) then
                // make INI directories in szINIDirectory
        
                bCopyINI = FALSE;
                bAlreadyAsk = FALSE;
        
                nTemp = 1;
        
                while (nTemp <= 1)
                        switch (nTemp)
                                case 1:
                                    szTemp = "PROFIT";
                                    SetStatusWindow(96, "Creating ExecuVision INI directory...");
                        endswitch;
        
                        // copy INI files to the new INI path
                        SRCDIR = szBaseDirectory ^ szTemp;
                        TARGETDIR = szINIDirectory ^ szTemp;
        
                        if (!bAlreadyAsk) then
                                // if keyfile does not exists then proceed to copy
                                if (fnFindFile(TARGETDIR, szTemp + ".INI")) then
                                        if ((!bExists16Bit) && (!bCopyINI)) then
                                                if (AskYesNo("Do you want to OVERWRITE all INI files " +
                                                   "in the INI directories?", NO) = YES) then
                                                        bCopyINI = TRUE;
                                                endif;
                                        endif;
                                else
                                        bCopyINI = TRUE;
                                endif;
        
                                bAlreadyAsk = TRUE;
                        endif;
        
                        if (bExists16Bit || szForceInstall = "1 " || bCopyINI) then
                                LOGMSG="START OF COPY INI Directory FROM '" + SRCDIR +
                                    "' TO '" + TARGETDIR + "'.";
                                LOGWRITE(LOGMSG);
        
                                nReturn = XCopyFile("*.*", "*.*", COMP_NORMAL | INCLUDE_SUBDIR);
        
                                LOGMSG="END OF COPY INI Directory FROM '" + SRCDIR +
                                    "' TO '" + TARGETDIR + "'.";
                                LOGWRITE(LOGMSG);
                        else
                                nReturn = 1;
                        endif;
        
                        if (nReturn >= 0) then
                                // DELETE szBaseDirectory\INIs directory if
                                // it is same as szINIDirectory
                                LOGMSG="START OF DELETE INI Directory '" + SRCDIR + "'.";
                                LOGWRITE(LOGMSG);
                                if (DeleteDir(SRCDIR, ALLCONTENTS) < 0) then
                                        MessageBox("Failed to Delete directory '" + SRCDIR + "'.", SEVERE);
                                endif;
                                LOGMSG="END OF DELETE INI Directory '" + SRCDIR + "'.";
                                LOGWRITE(LOGMSG);
                        endif;
        
                        if (nReturn < 0) then
                                switch (nReturn)
                                        case COPY_ERR_CREATEDIR:
                                                MessageBox("Failed to Create target directory", SEVERE);
                                                goto ZFailure;
                                        case COPY_ERR_MEMORY:
                                                MessageBox("Out of memory", SEVERE);
                                                goto ZFailure;
                                        case COPY_ERR_NODISKSPACE:
                                                MessageBox("Not enough disk space", SEVERE);
                                                goto ZFailure;
                                        case COPY_ERR_OPENINPUT:
                                                MessageBox("Error in open input file", SEVERE);
                                                goto ZFailure;
                                        case COPY_ERR_OPENOUTPUT:
                                                MessageBox("Error in open output file", SEVERE);
                                                goto ZFailure;
                                        case COPY_ERR_TARGETREADONLY:
                                                MessageBox("Target directory is read only", SEVERE);
                                                goto ZFailure;
                                        default:
                                                MessageBox("General file copy failure", SEVERE);
                                                goto ZFailure;
                                endswitch;
                        endif;
        
                        // delete the temporary source directory
                        //DeleteDir(SRCDIR, ALLCONTENTS);
        
                        nTemp = nTemp + 1;
                endwhile;

        else
                LOGMSG="INI Directory '" + szINIDirectory +
                    "' same as Program Directory '" + szBaseDirectory + "'.";
                LOGWRITE(LOGMSG);
        endif;

UpdateIQFactINI:
        SetStatusWindow(97, "Updating IQFACT.INI...");

        LOGMSG="START OF UPDATE IQFACT.INI";
        LOGWRITE(LOGMSG);

        UpdateIQFACTINI();

        LOGMSG="END OF UPDATE IQFACT.INI";
        LOGWRITE(LOGMSG);


CopyIQFactINI:
        SRCDIR = szBaseDirectory ^ "INI";
        TARGETDIR = WINDIR;

	if (CMDLINE = "-A" || CMDLINE = "-a") then

                LOGMSG="START FORCED COPY OF IQFACT.INI FROM '" + SRCDIR +
                    "' TO '" + TARGETDIR + "'.";
                LOGWRITE(LOGMSG);

                nReturn = XCopyFile("IQFACT.INI", "IQFACT.INI",
                        COMP_NORMAL);

                LOGMSG="END FORCED COPY OF IQFACT.INI FROM '" + SRCDIR +
                    "' TO '" + TARGETDIR + "'.";
                LOGWRITE(LOGMSG);
        else

                LOGMSG="START NORMAL COPY OF IQFACT.INI FROM '" + SRCDIR +
                    "' TO '" + TARGETDIR + "'.";
                LOGWRITE(LOGMSG);

                nReturn = XCopyFile("IQFACT.INI", "IQFACT.INI",
                        COMP_UPDATE_DATE | COMP_UPDATE_SAME);

                LOGMSG="END NORMAL COPY OF IQFACT.INI FROM '" + SRCDIR +
                    "' TO '" + TARGETDIR + "'.";
                LOGWRITE(LOGMSG);
        endif;

        VarRestore(SRCTARGETDIR);
        
        CreateProgramFolder:
        LOGMSG="START OF CREATE PROGRAM FOLDER";
        LOGWRITE(LOGMSG);

	SRCDIR = szEXECTRAKDirectory;
        TARGETDIR = szBaseDirectory;
        XCopyFile("iqfact.hlp", "iqfact.hlp", COMP_NORMAL);
        TARGETDIR= szEXECTRAKDirectory;
        DeleteFile("iqfact.hlp");
        
        // create folder shortcuts
        szFolder = COMPANY_NAME ^ PROGRAM_GROUP;
        szAppDir = szBaseDirectory ^ "BIN";
        szSCWork = szAppDir;
        szSCIcon = "";

        // uninstall shortcuts
        //szProgram = UNINST;
        //szProgram = szProgram + " -f\"" + svUninstLogFile + "\"";
        //AddFolderIcon(szFolder, "Uninstall " + PRODUCT_NAME, szProgram,
        //                          WINDIR, "", 0, "", REPLACE);

        szSCExe = WINDIR ^ "notepad.exe " + TARGETDISK ^ "Factor" ^ "iqf_log.txt";
        AddFolderIcon(szFolder, "ExecuVision Data Warehouse Update Log",
                                  szSCExe, szBaseDirectory, szSCIcon, 0, "", REPLACE);

        SetStatusWindow(94, "Creating program folder and icons...");

       // szSCExe = szAppDir ^ "runsql2.exe";
        //AddFolderIcon(szFolder, "Run SQL",
        //                          szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        szSCExe = szBaseDirectory ^ "iqfact.hlp";
        AddFolderIcon(szFolder, "ExecuVision Help",
                                  szSCExe, szBaseDirectory, szSCIcon, 0, "", REPLACE);

        SetStatusWindow(95, "Creating program folder and icons...");

        //szSCExe = "\"" + szAppDir ^ "iqfact.exe\" networknode:factor:/factor/company, username, password, I";
        //AddFolderIcon(szFolder, "ExecuVision Data Warehouse Build",
        //                          szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);
        //
        //instead of add folder item, now delete the folder item
        DeleteFolderIcon(szFolder, "ExecuVision Data Warehouse Build");

        szSCExe = szAppDir ^ "iqfactmt.exe";
        AddFolderIcon(szFolder, "ExecuVision Reference File Maintenance",
                                  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        SetStatusWindow(96, "Creating program folder and icons...");

        szSCExe = szAppDir ^ "iqfestrm.exe";
        AddFolderIcon(szFolder, "ExecuVision Data Warehouse Process Maintenance",
                                  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        szSCExe = szAppDir ^ "iqffcpmt.exe";
        AddFolderIcon(szFolder, "ExecuVision Company File Maintenance",
                                  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        SetStatusWindow(97, "Creating program folder and icons...");
        
        szSCExe = szAppDir ^ "iqferept.exe";
        AddFolderIcon(szFolder, "ExecuVision OLAP Analysis",
                                  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        szSCExe = szAppDir ^ "iqefact.exe";
        AddFolderIcon(szFolder, "Run Data Model Builder",
                                  szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);

        LOGMSG="END OF CREATE PROGRAM FOLDER";
        LOGWRITE(LOGMSG);

        SetStatusWindow(98, "Creating program folder and icons...");


	SetStatusWindow(99, "Finishing " + PRODUCT_NAME + " installation...");
	
	// add registry information
	LOGMSG="ADDING REGISTRY INFORMATION";
	LOGWRITE(LOGMSG);
	
	if (bRunStandAlone) then
		RegDBSetKeyValueEx(KEY_ROOT, KEY_CLIENT_PATH, REGDB_STRING, szDisk ^ APP_FACTOR_PATH ^ PRODUCT_SUBDIR, -1);
		RegDBSetKeyValueEx(KEY_ROOT, KEY_SERVER_PATH, REGDB_STRING, "", -1);
	else
		RegDBSetKeyValueEx(KEY_ROOT, KEY_SERVER_PATH, REGDB_STRING, szDisk ^ APP_FACTOR_PATH ^ PRODUCT_SUBDIR, -1);
	endif;

	RegDBSetKeyValueEx(KEY_ROOT ^ PRODUCT_NAME, KEY_REMOTE, REGDB_NUMBER, "0", -1);
	
UpdateIQVision:
        // update new version of IQ/VISION - IQVA.EXE file
        if (szIQDir != "") then
                // copy iqva.exe to \iq\iqvision
                SRCDIR = szBaseDirectory ^ "BIN";
                TARGETDIR = szIQDir;

                SetStatusWindow(99, "Update IQ/VISION program...");

                if (XCopyFile("IQVA.EXE", "IQVA.EXE", COMP_UPDATE_SAME) < 0) then
                        MessageBox("Update IQ/VISION program file failed.\n\n" + PRODUCT_NAME + " may not work properly.",
                            WARNING);
                else
                        TARGETDIR = SRCDIR;
                        DeleteFile("IQVA.EXE");
 
                endif;
        else
                MessageBox("IQ/VISION program file not found.\n\n" + PRODUCT_NAME + " may not work properly.",
                        WARNING);
        endif;
	

	SetStatusWindow(100, "Finishing " + PRODUCT_NAME + " installation...");
	
	Delay( 1 );
	Disable(STATUS);
	Disable(FEEDBACK_FULL);
	
	// display finished dialog
	LOGMSG="INSTALLATION COMPLETE";
	LOGWRITE(LOGMSG);

	
	if (BATCH_INSTALL) then
        
		CopyLocalDB("First");    
		LOGMSG="MUST REBOOT BEFORE RUNNING";
		LOGWRITE(LOGMSG);
		
		Disable(BACKBUTTON);
		fnFinishReboot(WELCOME_TITLE + " has finished copying files to your computer." +
			"  Before you can use " + PRODUCT_NAME + ", you must restart " +
			"your computer.");
		
	else

		CopyLocalDB("");
		fnFinishReboot(WELCOME_TITLE + " has finished copying files to your computer." +
			"  Before you can use " + PRODUCT_NAME + ", you must restart " +
			"your computer.");
//		SdFinish(WELCOME_TITLE + " Complete",
//			WELCOME_TITLE + " has finished copying files to your computer.",
//			"Click Finish to complete " + WELCOME_TITLE,
//			"", "", bTemp1, bTemp2);
	endif;   
	

	exit;


ZFailure:
	LOGMSG="INSTALLATION FAILED";
	LOGWRITE(LOGMSG);
	
	MessageBox("Installation incomplete.  Close any running\n" +
			   "applications before intalling " + PRODUCT_NAME + " Server Installation.",
			   INFORMATION);
	abort;
	
/*--------------- END OF PROGRAM --------------*\
	
		
/*---------------------------------------------*\
*
*	CheckDiskSpace
*
*	Checks the available disk space against the
*	amount requested and returns TRUE if the
*	requested space is available
*
\*---------------------------------------------*/
	
function CheckDiskSpace(nBytesRequired)

    number nActualSize;
	number nSpaceAvailable;
	number nReturn;
	string szNumber;
	string szMessage;
	BOOL bSpaceOK;
		    
begin
	
    nSpaceAvailable = GetDiskSpace(szBaseDirectory);
    
	if (nSpaceAvailable < nBytesRequired) then
		NumToStr(szNumber, nBytesRequired / 1024);
		szMessage = szNumber + " Kbytes of disk space is required for this installation.\nThe targe drive has ";
		NumToStr(szNumber, nSpaceAvailable / 1024);
		szMessage = szMessage + szNumber + " Kbytes available.\n\nContinuing may result in an incomplete installation.\n\n";
		szMessage = szMessage + "Do you still want to install to \"" + szBaseDirectory + "\"?";
		
		nReturn = MessageBox(szMessage, MB_ICONEXCLAMATION + MB_TASKMODAL + MB_YESNO + MB_DEFBUTTON2);
		
		if (nReturn = IDYES) then
			bSpaceOK = TRUE;
		else
			bSpaceOK = FALSE;
		endif;
    else
    	bSpaceOK = TRUE;
    endif;
    
    return bSpaceOK;

end;


//check factmenu.exe version
function Is16BitFactMenu()

        NUMBER nResult;
        STRING svVersionNumber, szResult;

begin

        nResult = VerGetFileVersion(szEXECTRAKDirectory ^ FACTOR_KEY, svVersionNumber);
        if(nResult = 0) then  //file version found
                StrSub(szResult, svVersionNumber, 0, 1);
                if (szResult = "1") then
                        return TRUE;
                else
                        return FALSE;
                endif;
        else
                return FALSE;
        endif;
end;


// write log function
function LOGWRITE(logline)

begin
	logline=logline + "\n";
	WriteLine( nvFileOut, logline);
	return;
end;

function CopySetup()
 
begin
	VarSave(SRCTARGETDIR);
	TARGETDIR = WINDIR ^ "TEMP_SETUP";
	LOGMSG="START NORMAL XCOPY OF \\*.* FILES TO " + TARGETDIR;
    	LOGWRITE(LOGMSG);
    	nReturn = XCopyFile("*.*", "*.*", COMP_NORMAL);
    	if (nReturn < 0) then
        	MessageBox("Setup could not be xcopied", SEVERE);
        	return;
    	endif;
    	LOGMSG="END NORMAL XCOPY OF \\*.* FILES TO " + TARGETDIR;
    	LOGWRITE(LOGMSG);
    
    	LOGMSG="DELETE SETUP.BMP FILE FROM " + TARGETDIR;
    	LOGWRITE(LOGMSG);
    	DeleteFile("setup.bmp");
	DeleteFile("_isdel.exe");
        VarRestore(SRCTARGETDIR);

end;

function FindAndReplace(szFileName, szSearchStr, szInsertLine)

        NUMBER nvLineNumber, nvReturn, nvOutReturn, nFlag, nPosi; 
        STRING svReturnLine, szErrMsg, svNewLine, szSub;

begin

        nFlag = RESTART;

        repeat

                nvReturn = FileGrep(szFileName, szSearchStr, svReturnLine, nvLineNumber, nFlag);

                if (nvReturn < 0) then
                        switch(nvReturn)
                        case FILE_NOT_FOUND:
                                szErrMsg = "FILE NOT FOUND";
                        case FILE_LINE_LENGTH:
                                szErrMsg = "FILE LINE LENGTH";
                        case OTHER_FAILURE:
                                szErrMsg = "OTHER FAILURE";
                        case END_OF_FILE:
                                szErrMsg = "END OF FILE";
                        endswitch;

                        if (nvReturn != END_OF_FILE) then
                                MessageBeep( 0 );
                                MessageBox( "Failed to update " + szFileName + ".\n\nError Desc: " + szErrMsg, SEVERE );

                                LOGMSG=szErrMsg + " ERROR. FAILED TO UPDATING " + szFileName;
                                LOGWRITE(LOGMSG);
                        endif;

                        return;
                else
                        //make new line
                        szSub = "";
                        svNewLine = "";
        
                        //replace szSearchStr From svReturnLine
                        //with szInsertLine
                        nPosi = StrFind(svReturnLine, szSearchStr);
        
                        if (nPosi >= 0) then
                                StrSub(szSub, svReturnLine, 0, nPosi);
                                svNewLine = szSub;
                
                                szSub = "";
                                StrSub(szSub, svReturnLine, nPosi +
                                    StrLength(szSearchStr),
                                    StrLength(svReturnLine) - nPosi -
                                    StrLength(szSearchStr));

                                svNewLine = svNewLine + szInsertLine + szSub;
                        endif;

                        nvOutReturn = FileInsertLine(szFileName, svNewLine, nvLineNumber, REPLACE);

                        if (nvOutReturn < 0) then
                                switch(nvReturn)
                                case FILE_NOT_FOUND:
                                        szErrMsg = "FILE NOT FOUND";
                                case FILE_LINE_LENGTH:
                                        szErrMsg = "FILE LINE LENGTH";
                                case FILE_RD_ONLY:
                                        szErrMsg = "FILE READ ONLY";
                                case LINE_NUMBER:
                                        szErrMsg = "LINE NUMBER";
                                case OUT_OF_DISK_SPACE:
                                        szErrMsg = "OUT OF DISK SPACE";
                                case OTHER_FAILURE:
                                        szErrMsg = "OTHER FAILURE";
                                endswitch;
        
                                MessageBeep( 0 );
                                MessageBox( "Failed to update " + szFileName + ".\n\nError Desc: " + szErrMsg, SEVERE );

                                LOGMSG=szErrMsg + " ERROR. FAILED TO UPDATING " + szFileName;
                                LOGWRITE(LOGMSG);
        
                                return;
                        endif;
                endif;

                if (nFlag = RESTART) then
                        nFlag = CONTINUE;
                endif;
        until (nvReturn < 0);

end;

function CopyLocalDB(szSetup)
        STRING szDBFrom, szDBTo, szProgDir;
        STRING szForceNormal;
        STRING szTemp, szCmdLine;
        NUMBER nvPosi;
begin
        
	  if szSetup = "" then
		szProgDir = szEXECTRAKDirectory ^ "BIN";
                	szForceNormal = szForceInstall;
        	elseif szSetup = "First" then
		szProgDir = szEXECTRAKDirectory ^ "BIN";
		szFolder = "Startup";
		szSCIcon = "";
		szSCWork = WINDIR ^ "TEMP_SETUP";
		szSCExe = szSCWork ^ "SETUP.EXE";
		StrSub(szTemp, szForceInstall, 0, 1);
		szSCExe = szSCExe + " CPYLOCAL " + szTemp + " " + szProgDir + " ";
		
		AddFolderIcon(szFolder, "CopyLocal",
		      szSCExe, szSCWork, szSCIcon, 0, "", REPLACE);
		
		return;
	else
		StrSub(szTemp, CMDLINE, 0, 8);

		if szTemp = "CPYLOCAL" then
    		
            		szTemp = CMDLINE;
            		nvPosi = StrFind(szTemp, " ");

            		if nvPosi < 0 then
        			return;
            		endif;

            		//skip CPYLOCAL
            		StrSub(szTemp, szTemp, nvPosi + 1, StrLength(szTemp));

            		//get force or normal installation
            		nvPosi = StrFind(szTemp, " ");

            		if nvPosi < 0 then
       			return;
            		endif;
            		StrSub(szForceNormal, szTemp, 0, 1);

            		szForceNormal = szForceNormal + " ";

                        //skip ForceNormal flag
                        StrSub(szTemp, szTemp, nvPosi + 1, StrLength(szTemp));

            		//get cpylocal.exe program directory
            		StrSub(szProgDir, szTemp, 0, StrLength(szTemp));
            	else
            		return;
		endif;
	endif;

        VarSave(SRCTARGETDIR);

        SRCDIR = WINDIR ^ "TEMP";
     
        SdShowMsg("", FALSE);

        if !fnFindFile(WINSYSDIR, "FACTOR.MDB") then
                TARGETDIR = WINSYSDIR;

                SdShowMsg("Copying Database from '" + SRCDIR + "' to '" +
                    TARGETDIR + "'. Please wait...", TRUE);

                CopyFile("FACTOR.MDB", "FACTOR.MDB");
        else
                //copy FACTOR.MDB from WINDOWS\TEMP to WINDOWS\SYSTEM directory
                szDBFrom = "\"" + SRCDIR + "\"";
                TARGETDIR = WINSYSDIR;
                szDBTo = "\"" + TARGETDIR + "\"";

                SdShowMsg("Copying Database from '" + SRCDIR + "' to '" +
                      TARGETDIR + "'. Please wait...", TRUE);
            
                LaunchAppAndWait(szProgDir ^ "cpylocal.exe", szForceNormal +
                      szDBFrom + " " + szDBTo, WAIT); 
          
        endif;
	
	if !fnFindFile(szProgDir, "FACTOR.MDB") then
                TARGETDIR = szProgDir;

                SdShowMsg("Copying Database from '" + SRCDIR + "' to '" +
                    TARGETDIR + "'. Please wait...", TRUE);

                CopyFile("FACTOR.MDB", "FACTOR.MDB");

        else          
                //copy FACTOR.MDB from WINDOWS\TEMP to BIN directory
                szDBFrom = "\"" + SRCDIR + "\"";
                TARGETDIR = szProgDir;
                szDBTo = "\"" + TARGETDIR + "\"";

                SdShowMsg("Copying Database from '" + SRCDIR + "' to '" +
                TARGETDIR + "'. Please wait...", TRUE);

                LaunchAppAndWait(szProgDir ^ "cpylocal.exe", szForceNormal +
                    szDBFrom + " " + szDBTo, WAIT);
	endif;
	
	SdShowMsg("", FALSE);
	
	// register ole files  
        StrToUpper(szProgDir, szProgDir);
        nvPosi = StrFind(szProgDir, "\\BIN");
                        
        if nvPosi >= 0 then
                //StrSub(szTemp, szProgDir, 0, nvPosi);
	szTemp = WINDISK ^ "Factor" ^ "OLE";
        	    LaunchAppAndWait(szTemp ^ "IQFOLE32.EXE", " /s", WAIT);
        	    LaunchAppAndWait(szTemp ^ "IQRUNOLE.EXE", " /s", WAIT);
        endif;


        SdShowMsg("", FALSE);

	// delete the local database from WINDOWS\TEMP directory
        TARGETDIR = WINDIR ^ "TEMP";
        DeleteFile("FACTOR.MDB");
        DeleteFile("FACTOR.LDB");
        SRCDIR = WINDIR;
        ChangeDirectory(WINDIR);
	TARGETDIR = WINDIR ^ "TEMP_SETUP";
	DeleteDir(TARGETDIR, ALLCONTENTS);

        if szSetup = "Second" then
                szFolder = "Startup";
                DeleteFolderIcon(szFolder, "CopyLocal");

                SdFinish(WELCOME_TITLE + " Complete",
                	WELCOME_TITLE + " has finished copying files to your computer.",
                             "Click Finish to complete " + WELCOME_TITLE,
                             "", "", bTemp1, bTemp2);
        endif;

        VarRestore(SRCTARGETDIR);

end;	


function fnFindFile(szPath, szFile)

        STRING svResult;

begin

        svResult = "";

        FindFile(szPath, szFile, svResult);

        if (svResult = "") then
                return FALSE;
        else
                return TRUE;
        endif;

end;

//check 16- bit version
function IsExists16BitVersion(szProgDir)

        NUMBER nResult;
        STRING svVersionNumber, szResult;

begin

        nResult = VerGetFileVersion(szProgDir ^ PRODUCT_KEY, svVersionNumber);
        if(nResult = 0) then  //file version found
                StrSub(szResult, svVersionNumber, 0, 1);
                if (szResult = "1") then
                        return TRUE;
                else
                        return FALSE;
                endif;
        else
                return FALSE;
        endif;
end;

function fnFinishReboot(sRebootMsg)

begin

        MessageBox(sRebootMsg + "\n\nWARNING: Please save all changes and close all other applications. Click " +
            "on OK button to Reboot your system.", WARNING);

        CommitSharedFiles(0);

        System(SYS_BOOTMACHINE);

end;


function CheckExistsDir(szDirPath)
        STRING svDisk;
begin

        ParsePath(svDisk, szDirPath, DISK);

        if (ExistsDisk(svDisk) != EXISTS) then
                MessageBox("The specify directory:\n\n'" + szDirPath +
                    "'\n\nis invalid, incomplete or write protected." +
                    "  Please type a full path with drive letter; for " +
                    "example 'C:APPS'.", SEVERE);
                    return NOTEXISTS;
        endif;

        return EXISTS;

end;

function UpdateIQFACTINI()

        NUMBER nvLineNumber, nvReturn, nvOutReturn, nFlag; 
        STRING szOldValue, szKey, szTemp, szDisk;
        STRING szFileName, szSearchStr, svReturnLine, szErrMsg;
        STRING szInsertLine;

begin

        VarSave(SRCTARGETDIR);

        SRCDIR = szBaseDirectory ^ "INI";
        szFileName = "IQFACT.INI";

        szSearchStr = "J:\\FACTOR\\EXECVISN\\";
        szInsertLine = szINIDirectory ^ "";
        StrToUpper(szInsertLine, szInsertLine);

        FindAndReplace(szFileName, szSearchStr, szInsertLine);

        VarRestore(SRCTARGETDIR);

        szFolder = szBaseDirectory ^ "INI" ^ "IQFACT.INI";
        GetProfString(szFolder, "GENERAL", "IQPATH", szTemp);

        szAppDir = szTemp;
        StrToUpper(szTemp, szTemp);

        if (szTemp ^ "" != szIQDir ^ "") then
                ReplaceProfString(szFolder, "GENERAL",
                "IQPATH", szAppDir, szIQDir);
        endif;

        GetDisk(szBaseDirectory, szDisk);
        StrToUpper(szDisk, szDisk);

        GetProfString(szFolder, "GENERAL", "LOGFILEPATH", szTemp);

        szAppDir = szTemp;
        StrToUpper(szTemp, szTemp);

        if (szTemp ^ "" != szDisk ^ "FACTOR") then
                szTemp = szDisk ^ "FACTOR";
                ReplaceProfString(szFolder, "GENERAL",
                "LOGFILEPATH", szAppDir, szTemp);
        endif;

        GetProfString(szFolder, "GENERAL", "IQReportINIPath", szTemp);

        szAppDir = szTemp;
        StrToUpper(szTemp, szTemp);

        if (szTemp ^ "" != szINIDirectory ^ "") then
                szTemp = szINIDirectory ^ "";
                StrToUpper(szTemp, szTemp);
                ReplaceProfString(szFolder, "GENERAL",
                "IQReportINIPath", szAppDir, szTemp);
        endif;

end;

function GetIQVISIONPath()
        STRING szMsg;
begin

        szMsg = "Setup will copy IQ/VISION program file - IQVA.EXE to the Destination Directory.\n\n";
        szMsg = szMsg + "To copy to this directory, click Next.\n\n";
        szMsg = szMsg + "To copy to a different directory, click Browse and select another\n";
        szMsg = szMsg + "directory.\n\n";

        if (AskDestPath("Enter IQ VISION Program File Location", szMsg, szIQDir, 0) = BACK) then
                return BACK;
        else
                return NEXT;
        endif;

end;

function CheckIQKey()
        STRING szTemp;
begin

        if (fnFindFile(szIQDir, KEY_IQ)) then
                return EXISTS;
        else
                MessageBox("IQ VISION Program directory:\n\n'" +
                        szIQDir + "' is not valid.", SEVERE);
                return NOTEXISTS;
        endif;
end;

function AddModule(szPath)

   NUMBER  nvFileHandle, nFlag;
   STRING  szLineText, szTemp, szBinZ;	
begin

   // Set open file mode to append mode.
   
   OpenFileMode (FILE_MODE_NORMAL);
   // Open the file and get the handle
   if (OpenFile (nvFileHandle, szPath, "CLIENT.INF") < 0) then
      MessageBox ("Could not open the file CLIENT.INF", WARNING);
      exit;
   else
   	nFlag=0;
   	szTemp=KEY_DEFAULT + "BIN.Z";
   	szBinZ=KEY_DEFAULT + "BIN.Z";
   	while (nFlag = 0 && szTemp != "")
		szLineText = "";
			
		nFlag = GetLine (nvFileHandle, szLineText);
		if nFlag=0 then	
			StrSub(szTemp, szLineText, 0, 7);
			StrToUpper(szTemp, szTemp);	
			if szTemp = szBinZ then
				szTemp="";
			endif;
		endif;
	endwhile;	

	if szTemp!="" then
	     	// Insert text in file.
	     	CloseFile (nvFileHandle);
	     	OpenFileMode (FILE_MODE_APPEND);
	     	if (OpenFile (nvFileHandle, szPath, "CLIENT.INF") < 0) then
      			MessageBox ("Could not open the file CLIENT.INF", WARNING);
      			exit;
   		else
	   		if (WriteLine (nvFileHandle, szBinZ + "=" + MODULE_NAME) < 0) then
	      			MessageBox ("Could not write to file CLIENT.INF", WARNING);
	      			exit;
	   		endif;
	   	endif;
	endif;
   endif;

   CloseFile (nvFileHandle);

end;

#include "sddialog.rul"
